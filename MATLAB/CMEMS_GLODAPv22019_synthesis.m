clc; clear all; close all
workrootdir=...
    '/Users/rpr061/Documents/localtestarea/CARBON-REP-042020/';
outdir=[workrootdir,'GLODAP_REP_OBSERVATIONS/'];


% Load GLODAP matlab file (generated by them)
GLODAPv22019=load([workrootdir,'GLODAPv2.2019_Merged_Master_File.mat']);

% Change all -9999 with NaN in GLODAP file
fn=fieldnames(GLODAPv22019);
for nfn=1:length(fn)
    if ~iscell(GLODAPv22019.(fn{nfn}))
        GLODAPv22019.(fn{nfn})(GLODAPv22019.(fn{nfn})==-9999)=NaN; end
end
% Some data points have NaN hour/minute
GLODAPv22019.G2hour(isnan(GLODAPv22019.G2hour))=0;
GLODAPv22019.G2minute(isnan(GLODAPv22019.G2minute))=0;

% Read the cruise/platform info sheet
GLODAPv22019_info=tdfread([workrootdir,'CMEMS_GLODAPv22019.tsv']);
% Convert all char and numeric (except the CruiseCounter) fields to cellstr
fn=fieldnames(GLODAPv22019_info);
for f=1:length(fn)
    if ischar(GLODAPv22019_info.(fn{f})); GLODAPv22019_info.(fn{f})=cellstr(GLODAPv22019_info.(fn{f}));
    elseif isnumeric(GLODAPv22019_info.(fn{f})) & ~strcmp(fn{f},'CruiseCounter')
        GLODAPv22019_info.(fn{f})=cellstr(num2str(GLODAPv22019_info.(fn{f})));
    end
end
% Use the platform name as platform code if the callsign is missing
nocallsign=cellfun(@isempty,GLODAPv22019_info.CallSign_WMO);
allplatformcodes=GLODAPv22019_info.CallSign_WMO;
allplatformcodes(nocallsign)=GLODAPv22019_info.Name(nocallsign);
% List of platforms (basis for splitting data in INSTAC)
unique_platform_code=unique(allplatformcodes);

% Variables names lists
% GLODAP variable (structure fields) names, with G2 prepended
invars={'bottomdepth','temperature','salinity','oxygen','nitrate',...
    'nitrite','phosphate','silicate','phtsinsitutp','phts25p0','tco2',...
    'talk','doc','don','tdn','chla'};
% GLODAP WOCE flag variable names, with G2 prepended. qc variables are
% secondary QC flags, not applicable (adjusted/unadjusted, etc)
flaggedvars={'salinityf','oxygenf','nitratef',...
    'nitritef','phosphatef','silicatef','phtsinsitutpf','phts25p0f','tco2f',...
    'talkf','docf','donf','tdnf','chlaf'};
% INSTAC variable names
osvars={'BATH','TEMP','PSAL','DOX2','NTAW',...
    'NTIW','PHOW','SLCW','PHPH','PH25','TICW',...
    'ALKW','CORG','NODW','NT1D','CPHL'};
% INSTAC units
osunits={'meters','degrees_C','0.001','µmol kg-1','µmol kg-1',...
    'µmol kg-1','µmol kg-1','µmol kg-1','1','1','µmol kg-1',...
    'µmol kg-1','µmol kg-1','µmol kg-1','µmol kg-1','mg m-3'};
% INSTAC long name
oslongname={'Bottom depth','Sea temperature','Practical salinity',...
    'Dissolved oxygen','Nitrate (NO3-N)',...
    'Nitrite (NO2-N)','Phosphate (PO-P)','Silicate (SiO4-Si)',...
    'Ph','Ph at 25 degrees and 0 dbar','Dissolved inorganic carbon',...
    'Total alkalinity','Dissolved organic carbon','Dissolved organic nitrogen',...
    'Total dissolved nitrogen','Chlorophyll-a'};
% INSTAC standard name
osstandardname={'sea_floor_depth_below_mean_sea_level','sea_water_temperature',...
    'sea_water_practical_salinity','moles_of_oxygen_per_unit_mass_in_sea_water',...
    'moles_of_nitrate_per_unit_mass_in_sea_water','moles_of_nitrite_per_unit_mass_in_sea_water',...
    'moles_of_phosphate_per_unit_mass_in_sea_water','moles_of_silicate_per_unit_mass_in_sea_water',...
    'sea_water_ph_reported_on_total_scale','sea_water_ph_reported_on_total_scale_at_25_degrees_and_0_dbar',...
    'moles_of_dissolved_inorganic_carbon_per_unit_mass_in_sea_water','sea_water_alkalinity_per_unit_mass',...
    'moles_of_dissolved_organic_carbon_per_unit_mass_in_sea_water','moles_of_dissolved_organic_nitrogen_per_unit_mass_in_sea_water',...
    'moles_of_dissolved_total_nitrogen_per_unit_mass_in_sea_water','mass_concentration_of_chlorophyll_a_in_sea_water'};

% Map GLODAP flags to OceanSITES: NaN -> 0; 0->8; 1->9; 2->1; 3->2; 4->4;
% 5->9; 6->8; 7->0; 8->0; 9->9
for nfv=1:length(flaggedvars)
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==0)=8;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==1)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==2)=1;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==3)=2;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==4)=4;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==5)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==6)=8;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==7)=0;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==8)=0;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==9)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])=int8(GLODAPv22019.(['G2',flaggedvars{nfv}]));
end

% Temperature and bottom depth are assumed good if they exist
GLODAPv22019.G2bottomdepthf=zeros(size(GLODAPv22019.G2salinityf));
GLODAPv22019.G2temperaturef=ones(size(GLODAPv22019.G2salinityf));


% NetCDF format specs
cmode = netcdf.getConstant('NETCDF4');
cmode = bitor(cmode,netcdf.getConstant('CLASSIC_MODEL'));
% Global attributes
data_type='OceanSITES vertical profile';
cdm_data_type='profile';

%%
tic

% Either fix the issue of missing cruises or add the multiple ship cruises
for platnum=1:length(unique_platform_code)
    
    currentpc=unique_platform_code{platnum};
    % All expocodes with same platform
    filterec=ismember(allplatformcodes,{currentpc});
    % All data from the expocodes with same platform
    filterdata=ismember(GLODAPv22019.G2cruise,GLODAPv22019_info.CruiseCounter(filterec));
    
    % Platform-specific global attributes in proper format
    % Platform attributes
    platform_code=char(unique(allplatformcodes(filterec)));
    platform_code=platform_code(isstrprop(platform_code, 'alphanum')); % remove not-allowed characters
    platform_name=char(unique(GLODAPv22019_info.Name(filterec)));
    wmo_platform_code=char(unique(GLODAPv22019_info.CallSign_WMO(filterec)));
    ices_platform_code=char(unique(GLODAPv22019_info.ICEScode(filterec)));
    source_platform_category_code=char(unique(GLODAPv22019_info.PlatformType(filterec)));
    switch source_platform_category_code
        case '31'
            source='research vessel';
            outputfile = ['VESSEL/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
        case '21'
            source='propelled manned submersible';
            outputfile = ['ETC/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
        case '62'
            source='aeroplane';
            outputfile = ['ETC/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
    end
    % Institution attributes
    institution=strjoin(transpose(unique(GLODAPv22019_info.Institution(filterec))),'/');
    institution_edmo_code=regexprep(char(join(transpose(unique(GLODAPv22019_info.EDMO(filterec))))),' +',' ');
    
    % Dimensions: TIME DEPTH
    % Read (and reformat) GLODAP time and depth.
    depthinglodap=GLODAPv22019.G2depth(filterdata); % data only from the relevant cruises
    [daa,dbb,dcc]=unique(depthinglodap); % string of unique depth values
    
    timeinglodapMATLAB = datenum(([GLODAPv22019.G2year(filterdata),...
        GLODAPv22019.G2month(filterdata),GLODAPv22019.G2day(filterdata),...
        GLODAPv22019.G2hour(filterdata),GLODAPv22019.G2minute(filterdata),...
        zeros(size(GLODAPv22019.G2minute(filterdata)))]));
    timeinglodap = daysdif(datenum('1950-01-01T00:00:00Z','yyyy-mm-ddTHH:MM:SSZ'), ...
        timeinglodapMATLAB);
    [taa,tbb,tcc]=unique(timeinglodap);
    
    % Create DEPH variable and QC matrices
    dephinmatrix=nan(length(daa),length(taa));
    dephinqcmatrix=nan(length(daa),length(taa));
    
    for oo=1:length(depthinglodap)
        dephinmatrix(dcc(oo),tcc(oo))=nanmean(depthinglodap(oo));
        dephinqcmatrix(dcc(oo),tcc(oo))=1;
    end
    
    latinglodap = GLODAPv22019.G2latitude(filterdata);
    latin=latinglodap(tbb);
    loninglodap=GLODAPv22019.G2longitude(filterdata);
    lonin=loninglodap(tbb);
    
    % Variables
    for vv=1:length(invars)
        % Data from the relevant cruises
        eval([invars{vv},'inglodap=round(GLODAPv22019.',['G2',invars{vv}],'(filterdata)*1000.);']);
        eval([invars{vv},'finglodap=GLODAPv22019.',['G2',invars{vv}],'f(filterdata);']);
        
        % Preallocate depthxtime matrices
        eval([invars{vv},'in=nan(length(daa),length(taa));']);
        eval([invars{vv},'inqc=nan(length(daa),length(taa));']);
        
        % Fill depthxtime matrices
        for oo=1:length(depthinglodap)
            % For cases of 2 measurements at the same point (e.g. two
            % bottles sampled: calculate "cumulatively" the average)
            eval([invars{vv},'in(dcc(oo),tcc(oo))=round(nanmean([',...
                invars{vv},'in(dcc(oo),tcc(oo)),',...
                invars{vv},'inglodap(oo)]));']);
            
            % If value is average of >1 bottle, flag is 8 (interpolated)
            if  eval(['isnan(',invars{vv},'inqc(dcc(oo),tcc(oo)));'])
                
                eval([invars{vv},'inqc(dcc(oo),tcc(oo))=',invars{vv},'finglodap(oo);']);
            else
                eval([invars{vv},'inqc(dcc(oo),tcc(oo))=8;']);
            end
            
        end
        eval([invars{vv},'in(isnan(',invars{vv},'in))=-2147483647;']);
        eval([invars{vv},'inqc(isnan(',invars{vv},'inqc))=-127;']);
    end
    
    daa(isnan(daa))=9.9692099683868690e+36;
    dephinqc=ones(size(daa));
    timeinqc=ones(size(taa));
    posinqc=ones(size(taa));
    
    %% Generate NetCDF
    % Create NetCDF file
    ncid = netcdf.create([outdir,outputfile], cmode);
    
    % Define dimensions and variables
    % Define dimensions
    latdim = netcdf.defDim(ncid, 'LATITUDE', length(latin));
    londim = netcdf.defDim(ncid, 'LONGITUDE', length(lonin));
    posdim = netcdf.defDim(ncid, 'POSITION', length(lonin));
    timedim = netcdf.defDim(ncid, 'TIME', length(taa));
    depthdim = netcdf.defDim(ncid, 'DEPTH', length(daa));
    
    % Define dimension-ish variables
    latvar = netcdf.defVar(ncid, 'LATITUDE', 'NC_FLOAT', latdim);
    lonvar = netcdf.defVar(ncid, 'LONGITUDE', 'NC_FLOAT', londim);
    timevar = netcdf.defVar(ncid, 'TIME', 'NC_DOUBLE', timedim);
    dephvar = netcdf.defVar(ncid, 'DEPH', 'NC_FLOAT', [depthdim,timedim]);
    
    % Dimension variables QC DM
    dephvarqc = netcdf.defVar(ncid, 'DEPH_QC', 'NC_BYTE', [depthdim,timedim]);
    posvarqc = netcdf.defVar(ncid, 'POSITION_QC', 'NC_BYTE', posdim);
    timevarqc = netcdf.defVar(ncid, 'TIME_QC', 'NC_BYTE', timedim);
    
    % Define other variables
    for vv=1:length(invars)
        eval([invars{vv},'var=netcdf.defVar(ncid,''',osvars{vv},...
            ''',''NC_INT'',[depthdim,timedim]);']);
        eval([invars{vv},'varqc=netcdf.defVar(ncid,''',osvars{vv},...
            '_QC'',''NC_BYTE'',[depthdim,timedim]);']);
    end
    
    % Define _FillValue (does not work after reDef);
    netcdf.defVarFill(ncid, timevar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, latvar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, lonvar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, dephvar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, timevarqc, false, -127);
    netcdf.defVarFill(ncid, posvarqc, false, -127);
    netcdf.defVarFill(ncid, dephvarqc, false, -127);
    
    for vv=1:length(invars)
        eval(['netcdf.defVarFill(ncid,',invars{vv},'var,false,-2147483647);']);
        eval(['netcdf.defVarFill(ncid,',invars{vv},'varqc,false,-127);']);
    end
    
    % Exit define mode
    netcdf.endDef(ncid);
    
    % Put data
    % Put data in dimensions
    netcdf.putVar(ncid, latvar, latin);
    netcdf.putVar(ncid, lonvar, lonin);
    netcdf.putVar(ncid, timevar, taa);
    netcdf.putVar(ncid, timevarqc, timeinqc);
    netcdf.putVar(ncid, dephvar, dephinmatrix);
    netcdf.putVar(ncid, dephvarqc, dephinqcmatrix);
    netcdf.putVar(ncid, posvarqc, posinqc);
    
    % Put data in variables
    for vv=1:length(invars);
        eval(['netcdf.putVar(ncid,',invars{vv},'var,',invars{vv},'in);']);
        eval(['netcdf.putVar(ncid,',invars{vv},'varqc,',invars{vv},'inqc);']);
    end
    
    % Re-enter define mode (can be done before???)
    netcdf.reDef(ncid);
    
    % Add attributes
    % Add attributes to dimensions
    netcdf.putAtt(ncid, latvar, 'long_name', 'Latitude of each location');
    netcdf.putAtt(ncid, latvar, 'standard_name', 'latitude');
    netcdf.putAtt(ncid, latvar, 'units', 'degree_north');
    netcdf.putAtt(ncid, latvar, 'valid_min', -90.0);
    netcdf.putAtt(ncid, latvar, 'valid_max', 90.0);
    netcdf.putAtt(ncid, latvar, 'QC_indicator', 1);
    netcdf.putAtt(ncid, latvar, 'QC_procedure', 1);
    netcdf.putAtt(ncid, latvar, 'axis', 'Y');
    
    % Longitude
    netcdf.putAtt(ncid, lonvar, 'long_name', 'Longitude of each location');
    netcdf.putAtt(ncid, lonvar, 'standard_name', 'longitude');
    netcdf.putAtt(ncid, lonvar, 'units', 'degree_east');
    netcdf.putAtt(ncid, lonvar, 'valid_min', -180.0);
    netcdf.putAtt(ncid, lonvar, 'valid_max', 180.0);
    netcdf.putAtt(ncid, lonvar, 'QC_indicator', 1);
    netcdf.putAtt(ncid, lonvar, 'QC_procedure', 1);
    netcdf.putAtt(ncid, lonvar, 'axis', 'X');
    
    % Time
    netcdf.putAtt(ncid, timevar, 'long_name', 'Time');
    netcdf.putAtt(ncid, timevar, 'standard_name', 'time');
    netcdf.putAtt(ncid, timevar, 'units', 'days since 1950-01-01T00:00:00Z');
    netcdf.putAtt(ncid, timevar, 'valid_min', -90000.);
    netcdf.putAtt(ncid, timevar, 'valid_max', 90000.);
    netcdf.putAtt(ncid, timevar, 'QC_indicator', 1);
    netcdf.putAtt(ncid, timevar, 'QC_procedure', 1);
    netcdf.putAtt(ncid, timevar, 'axis', 'T');
    
    % Depth
    netcdf.putAtt(ncid, dephvar, 'long_name', 'Depth');
    netcdf.putAtt(ncid, dephvar, 'standard_name', 'depth');
    netcdf.putAtt(ncid, dephvar, 'valid_min', -12000.0);
    netcdf.putAtt(ncid, dephvar, 'valid_max', 12000.0);
    netcdf.putAtt(ncid, dephvar, 'units', 'm');
    netcdf.putAtt(ncid, dephvar, 'positive', 'down');
    netcdf.putAtt(ncid, dephvar, 'reference', 'sea_level');
    netcdf.putAtt(ncid, dephvar, 'QC_indicator', 1);
    netcdf.putAtt(ncid, dephvar, 'QC_procedure', 1);
    netcdf.putAtt(ncid, dephvar, 'axis', 'Z');
    
    % Time QC
    attributes_qc(ncid,timevarqc)
    attributes_qc(ncid,dephvarqc)
    attributes_qc(ncid,posvarqc)
    
    % Add attributes to variables
    for vv=1:length(invars)
        % Variables
        eval(['netcdf.putAtt(ncid,',invars{vv},'var,''units'',''',osunits{vv},''');']);
        eval(['netcdf.putAtt(ncid,',invars{vv},'var,''standard_name'',''',osstandardname{vv},''');']);
        eval(['netcdf.putAtt(ncid,',invars{vv},'var,''long_name'',''',oslongname{vv},''');']);
        eval(['netcdf.putAtt(ncid,',invars{vv},'var,''scale_factor'',0.001);']);
        eval(['netcdf.putAtt(ncid,',invars{vv},'var,''add_offset'',0);']);
        % QC variables
        eval(['attributes_qc(ncid,',invars{vv},'varqc);']);
    end
    
    % Global attributes
    globid = netcdf.getConstant('GLOBAL');
    
    netcdf.putAtt(ncid, globid, 'data_type', data_type);
    netcdf.putAtt(ncid, globid, 'platform_code', platform_code);
    netcdf.putAtt(ncid, globid, 'platform_name', platform_name);
    netcdf.putAtt(ncid, globid, 'data_mode', 'D');
    netcdf.putAtt(ncid, globid, 'title', 'Global Ocean - In Situ reprocessed carbon observations - GLODAPv2.2019');
    netcdf.putAtt(ncid, globid, 'naming_authority', 'Copernicus Marine in situ');
    netcdf.putAtt(ncid, globid, 'id', outputfile(1:end-3));
    netcdf.putAtt(ncid, globid, 'wmo_platform_code', '');
    netcdf.putAtt(ncid, globid, 'source', source);
    netcdf.putAtt(ncid, globid, 'source_platform_category_code', source_platform_category_code);
    netcdf.putAtt(ncid, globid, 'institution_edmo_code', institution_edmo_code);
    netcdf.putAtt(ncid, globid, 'institution', institution);
    netcdf.putAtt(ncid, globid, 'institution_references', '');
    
    %netcdf.putAtt(ncid, globid, 'area', ''); % North/Tropical/South Atlantic, Pacific, Indian, Southern, Arctic Ocean
    netcdf.putAtt(ncid, globid, 'geospatial_lat_min', num2str(min(latin)));
    netcdf.putAtt(ncid, globid, 'geospatial_lat_max', num2str(max(latin)));
    netcdf.putAtt(ncid, globid, 'geospatial_lon_min', num2str(min(lonin)));
    netcdf.putAtt(ncid, globid, 'geospatial_lon_max', num2str(max(lonin)));
    netcdf.putAtt(ncid, globid, 'geospatial_vertical_min', '5.0');
    netcdf.putAtt(ncid, globid, 'geospatial_vertical_max', '5.0');
    netcdf.putAtt(ncid, globid, 'time_coverage_start', datestr(min(timeinglodapMATLAB),'yyyy-mm-ddTHH:MM:SSZ'));
    netcdf.putAtt(ncid, globid, 'time_coverage_end', datestr(max(timeinglodapMATLAB),'yyyy-mm-ddTHH:MM:SSZ'));
    netcdf.putAtt(ncid, globid, 'cdm_data_type', cdm_data_type);
    %netcdf.putAtt(ncid, globid, 'summary', '');
    
    netcdf.putAtt(ncid, globid, 'format_version', '1.4');
    netcdf.putAtt(ncid, globid, 'Conventions', 'CF-1.6 Copernicus-InSituTAC-Manual-1.0 Copernicus-InSituTAC-SRD-1.4 Copernicus-InSituTAC-ParametersList-3.1.0');
    netcdf.putAtt(ncid, globid, 'netcdf_version', 'netCDF-4 classic model');
    
    netcdf.putAtt(ncid, globid, 'references', 'http://marine.copernicus.eu https://www.glodap.info');
    netcdf.putAtt(ncid, globid, 'data_assembly_center', 'BERGEN');
    netcdf.putAtt(ncid, globid, 'update_interval', 'void');
    netcdf.putAtt(ncid, globid, 'citation', ['These data were collected and made freely available by the Copernicus project and the programs that contribute to it. ',...
        'Cite as Olsen et al. (2019)a, Olsen et al. (2019)a; see dois.']);
    netcdf.putAtt(ncid, globid, 'doi', '10.5194/essd-11-1437-2019 10.25921/xnme-wr20');
    
    netcdf.putAtt(ncid, globid, 'date_update', datestr(now, 'yyyy-mm-ddTHH:MM:SSZ'));
    netcdf.putAtt(ncid, globid, 'history', [datestr(now, 'yyyy-mm-ddTHH:MM:SSZ'),' : Creation']);
    netcdf.putAtt(ncid, globid, 'last_date_observation',datestr(timeinglodapMATLAB(end),'yyyy-mm-ddTHH:MM:SSZ'));
    netcdf.putAtt(ncid, globid, 'last_latitude_observation',latin(end));
    netcdf.putAtt(ncid, globid, 'last_longitude_observation',lonin(end));
    netcdf.putAtt(ncid, globid, 'distribution_statement','These data follow Copernicus standards; they are public and free of charge. User assumes all risk for use of data. User must display citation in any publication or product using data. User must contact PI prior to any commercial use of data.');
    
    %if ec==720 | ec==721 % These are cruise numbers! Not platform
    %    netcdf.putAtt(ncid, globid, 'cruise_comment', 'Data gathered by RV Bjarni Saemundsson and RV Arni Fridrikkson (Callsigns TFNA/TFJA; IMO numbers 9192404/6710358)');
    %elseif ec==722
    %    netcdf.putAtt(ncid, globid, 'cruise_comment', 'Data gathered by RV Belgica, RV Charles Darwin and RV Meteor');
    %end
    
    % Close nc file
    netcdf.close(ncid);
    
    % Clear variables
    clearvars '-except' workrootdir outdir GLODAPv22019 GLODAPv22019_info ...
        cmode allplatformcodes unique_platform_code platnum ...
        invars vars osvars osunits oslongname osstandardname ...
        data_type cdm_data_type
end

toc
%%
% Pass the format checker through all the files
system(['cd /Users/rpr061/Dropbox/BCDC_Projects/CMEMS_INSTAC/REP_Products/current_FormatChecker/; for f in ', outdir,'VESSEL/*.nc; do ./control.csh $f >> ',outdir,'VESSEL/formatcheckoutSOCAT; done'])
system(['cd /Users/rpr061/Dropbox/BCDC_Projects/CMEMS_INSTAC/REP_Products/current_FormatChecker/; for f in ', outdir,'ETC/*.nc; do ./control.csh $f >> ',outdir,'ETC/formatcheckoutSOCAT; done'])


%% ============= FUNCTIONS ================================================
function attributes_qc(ncid, inputvar)
netcdf.putAtt(ncid, inputvar, 'long_name', 'quality flag');
netcdf.putAtt(ncid, inputvar, 'conventions', 'Copernicus Marine in situ reference table 2');
netcdf.putAtt(ncid, inputvar, 'valid_min', int8(0));
netcdf.putAtt(ncid, inputvar, 'valid_max', int8(9));
netcdf.putAtt(ncid, inputvar, 'flag_values',  [int8(0)  int8(1)  int8(2)  int8(3)  int8(4)  int8(5)  int8(6)  int8(7)  int8(8)  int8(9)]);
netcdf.putAtt(ncid, inputvar, 'flag_meanings','no_qc_performed good_data probably_good_data bad_data_that_are_potentially_correctable bad_data value_changed not_used nominal_value interpolated_value missing_value');
end



