clc; clear all; close all
workrootdir=...
    '/Users/rpr061/Documents/localtestarea/CARBON-REP-042020/';
outdir=[workrootdir,'GLODAP_REP_OBSERVATIONS/'];%['/Users/rpr061/Documents/localtestarea/CARBON-REP-042020/'];


% Load GLODAP matlab file (generated by them)
GLODAPv22019=load([workrootdir,'GLODAPv2.2019_Merged_Master_File.mat']);

% Change all -9999 with NaN
fn=fieldnames(GLODAPv22019);
for nfn=1:length(fn)
    if ~iscell(GLODAPv22019.(fn{nfn}))
    GLODAPv22019.(fn{nfn})(GLODAPv22019.(fn{nfn})==-9999)=NaN; end
end

% Read the info sheet
GLODAPv22019_info=tdfread([workrootdir,'CMEMS_GLODAPv22019.tsv']);
% Convert all char to cellstr
fn=fieldnames(GLODAPv22019_info);
for f=1:length(fn)
    if ischar(GLODAPv22019_info.(fn{f})); GLODAPv22019_info.(fn{f})=cellstr(GLODAPv22019_info.(fn{f}));
    elseif isnumeric(GLODAPv22019_info.(fn{f})) & ~strcmp(fn{f},'CruiseCounter')
        GLODAPv22019_info.(fn{f})=cellstr(num2str(GLODAPv22019_info.(fn{f})));
    end
end

nocallsign=cellfun(@isempty,GLODAPv22019_info.CallSign_WMO);
allplatformcodes=GLODAPv22019_info.CallSign_WMO;
allplatformcodes(nocallsign)=GLODAPv22019_info.Name(nocallsign);
unique_platform_code=unique(allplatformcodes);

%
% Map flag variables to OceanSITES: NaN -> 0; 0->8; 1->9; 2->1; 3->2; 4->4;
% 5->9; 6->8; 7->0; 8->0; 9->9
flaggedvars={'salinityf','oxygenf','nitratef',...
    'nitritef','phosphatef','silicatef','phtsinsitutpf','phts25p0f','tco2f',...
    'talkf','docf','donf','tdnf','chlaf'};

for nfv=1:length(flaggedvars)
    %  GLODAPv22019.(['G2',flaggedvars{nfv}])(isnan(GLODAPv22019.(['G2',flaggedvars{nfv}])))=0;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==0)=8;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==1)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==2)=1;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==3)=2;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==4)=4;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==5)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==6)=8;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==7)=0;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==8)=0;
    GLODAPv22019.(['G2',flaggedvars{nfv}])(GLODAPv22019.(['G2',flaggedvars{nfv}])==9)=9;
    GLODAPv22019.(['G2',flaggedvars{nfv}])=int8(GLODAPv22019.(['G2',flaggedvars{nfv}]));
end

GLODAPv22019.G2bottomdepthf=zeros(size(GLODAPv22019.G2salinityf));
GLODAPv22019.G2temperaturef=ones(size(GLODAPv22019.G2salinityf));
%GLODAPv22019.G2docf=GLODAPv22019.G2docf;

%unique_cruise=unique(GLODAPv22019.cruise);

% Variables to be included in Copernicus

invars={'bottomdepth','temperature','salinity','oxygen','nitrate',...
    'nitrite','phosphate','silicate','phtsinsitutp','phts25p0','tco2',...
    'talk','doc','don','tdn','chla'};
vars={'bath','temp','sal','oxy','nitra',...
    'nitri','phos','sili','ph','ph25','dic',...
    'alk','doc','don','tdn','chla'};
osvars={'BATH','TEMP','PSAL','DOX2','NTAW',...
    'NTIW','PHOW','SLCW','PHPH','PH25','TICW',...
    'ALKW','CORG','NODW','NT1D','CPHL'};
osunits={'meters','degrees_C','0.001','µmol kg-1','µmol kg-1',...
    'µmol kg-1','µmol kg-1','µmol kg-1','1','1','µmol kg-1',...
    'µmol kg-1','µmol kg-1','µmol kg-1','µmol kg-1','mg m-3'};
oslongname={'Bottom depth','Sea temperature','Practical salinity',...
    'Dissolved oxygen','Nitrate (NO3-N)',...
    'Nitrite (NO2-N)','Phosphate (PO-P)','Silicate (SiO4-Si)',...
    'Ph','Ph at 25 degrees and 0 dbar','Dissolved inorganic carbon',...
    'Total alkalinity','Dissolved organic carbon','Dissolved organic nitrogen',...
    'Total dissolved nitrogen','Chlorophyll-a'};
osstandardname={'sea_floor_depth_below_mean_sea_level','sea_water_temperature',...
    'sea_water_practical_salinity','moles_of_oxygen_per_unit_mass_in_sea_water',...
    'moles_of_nitrate_per_unit_mass_in_sea_water','moles_of_nitrite_per_unit_mass_in_sea_water',...
    'moles_of_phosphate_per_unit_mass_in_sea_water','moles_of_silicate_per_unit_mass_in_sea_water',...
    'sea_water_ph_reported_on_total_scale','sea_water_ph_reported_on_total_scale_at_25_degrees_and_0_dbar',...
    'moles_of_dissolved_inorganic_carbon_per_unit_mass_in_sea_water','sea_water_alkalinity_per_unit_mass',...
    'moles_of_dissolved_organic_carbon_per_unit_mass_in_sea_water','moles_of_dissolved_organic_nitrogen_per_unit_mass_in_sea_water',...
    'moles_of_dissolved_total_nitrogen_per_unit_mass_in_sea_water','mass_concentration_of_chlorophyll_a_in_sea_water'};

cmode = netcdf.getConstant('NETCDF4');
cmode = bitor(cmode,netcdf.getConstant('CLASSIC_MODEL'));

%%
tic

% Either fix the issue of missing cruises or add the multiple ship cruises
for ec=52:length(unique_platform_code) 
    % something happens with platform 18 and 19. also 37, 51,  Size?? :S Error using CMEMS_GLODAPv22019_synthesis
% (line 177)
% Error: Expression or statement is
% incorrect--possibly unbalanced (, {, or [.

    currentpc=unique_platform_code{ec};
    filterec=ismember(allplatformcodes,{currentpc});
    filterdata=ismember(GLODAPv22019.G2cruise,GLODAPv22019_info.CruiseCounter(filterec));
 
    platform_code=char(unique(allplatformcodes(filterec)));
    platform_code=platform_code(isstrprop(platform_code, 'alphanum')); % remove not-allowed characters
    platform_name=char(unique(GLODAPv22019_info.Name(filterec)));
    wmo_platform_code=char(unique(GLODAPv22019_info.CallSign_WMO(filterec)));
    ices_platform_code=char(unique(GLODAPv22019_info.ICEScode(filterec)));
    
    institution=strjoin(transpose(unique(GLODAPv22019_info.Institution(filterec))),'/');
    institution_edmo_code=regexprep(char(join(transpose(unique(GLODAPv22019_info.EDMO(filterec))))),' +',' ');
    
    source_platform_category_code=char(unique(GLODAPv22019_info.PlatformType(filterec)));
    switch source_platform_category_code
        case '31'
            source='research vessel';
            outputfile = ['VESSEL/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
        case '21'
            source='propelled manned submersible';
            outputfile = ['ETC/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
        case '62'
            source='aeroplane';
            outputfile = ['ETC/GL_PR_BO_',platform_code,'_GLODAPv22019.nc'];
    end   
  
               data_type='OceanSITES vertical profile';
            cdm_data_type='profile';
    
  
    %% Input variables
    depthinglodap=GLODAPv22019.G2depth(filterdata);
    [depthin,inddepthin]=unique(depthinglodap);
    
    timeinglodapMATLAB = datenum(([GLODAPv22019.G2year(filterdata),...
        GLODAPv22019.G2month(filterdata),GLODAPv22019.G2day(filterdata),...
        GLODAPv22019.G2hour(filterdata),GLODAPv22019.G2minute(filterdata),...
        zeros(size(GLODAPv22019.G2minute(filterdata)))]));
    timeinglodap = daysdif(datenum('1950-01-01T00:00:00Z','yyyy-mm-ddTHH:MM:SSZ'), ...
        timeinglodapMATLAB);
    
    [timein,indtimein]=unique(timeinglodap);
    
    depthinmatrix=nan(length(depthin),length(timein));
    depthinqcmatrix=nan(length(depthin),length(timein));
    %depthindmmatrix=nan(length(depthin),length(timein));
    
    
    for oo=1:length(depthinglodap)
        depthind=find(depthin==depthinglodap(oo));
        timeind=find(timein==timeinglodap(oo));
        
        depthinmatrix(depthind,timeind)=nanmean(depthinglodap(oo));
        depthinqcmatrix(depthind,timeind)=1;
        depthindmmatrix(depthind,timeind)='D';
    end
    
    latinglodap = GLODAPv22019.G2latitude(filterdata);
    latin=latinglodap(indtimein);
    loninglodap=GLODAPv22019.G2longitude(filterdata);
    lonin=loninglodap(indtimein);
    
    for vv=1:length(vars)
        % Variables
        eval([vars{vv},'inglodap=round(GLODAPv22019.',['G2',invars{vv}],'(filterdata)*1000.);']);
        eval([vars{vv},'finglodap=GLODAPv22019.',['G2',invars{vv}],'f(filterdata);']);
        %       eval([vars{vv},'inglodap(',vars{vv},'inglodap==-9999)=NaN;']);
        
        % Create depthxtime variables
        eval([vars{vv},'in=nan(length(depthin),length(',...
            'timein));']);
        eval([vars{vv},'inqc=nan(length(depthin),length(',...
            'timein));']);
        
        for oo=1:length(depthinglodap)
            depthind=find(depthin==depthinglodap(oo));
            timeind=find(timein==timeinglodap(oo));
            
            eval([vars{vv},'in(',num2str(depthind),...
                ',',num2str(timeind),')=round(nanmean([',...
                vars{vv},'in(',num2str(depthind),...
                ',',num2str(timeind),'),',...
                vars{vv},'inglodap(oo)]));']);
            
            % If value is average of >1 bottle, flag is 8 (interpolated)
            if  eval(['isnan(',vars{vv},'inqc(',num2str(depthind),...
                    ',',num2str(timeind),'));'])
                
                eval([vars{vv},'inqc(',num2str(depthind),...
                    ',',num2str(timeind),')=',vars{vv},'finglodap(oo);']);
            else
                eval([vars{vv},'inqc(',num2str(depthind),...
                    ',',num2str(timeind),')=8;']);
            end
            
            % eval([vars{vv},'inqc(',num2str(depthind),...
            %     ',',num2str(timeind),')=0;']);
            
            eval([vars{vv},'indm(',num2str(depthind),...
                ',',num2str(timeind),')=''D'';']);
        end
        eval([vars{vv},'in(isnan(',vars{vv},'in))=-2147483647;']);
        eval([vars{vv},'inqc(isnan(',vars{vv},'inqc))=-127;']);
       % eval([vars{vv},'inqc=int8(',vars{vv},'inqc);']);
        
        
    end
    
    %    for vv=1:length(vars)
    %        eval([vars{vv},'in=round(',vars{vv},'in*1000.);']);
    %    end
    
    depthin(isnan(depthin))=9.9692099683868690e+36;
    depthinqc=ones(size(depthin));
  %  depthindm=repmat('D',size(depthin));
    timeinqc=ones(size(timein));
    
   % possystin=repmat('U', size(timein));
    posinqc=ones(size(timein));
    
    %% Generate NetCDF
    % Create NetCDF file
    ncid = netcdf.create([outdir,outputfile], cmode);
    
    % Define dimensions and variables
    % Define dimensions
    latdim = netcdf.defDim(ncid, 'LATITUDE', length(latin));
    londim = netcdf.defDim(ncid, 'LONGITUDE', length(lonin));
    posdim = netcdf.defDim(ncid, 'POSITION', length(lonin));
    timedim = netcdf.defDim(ncid, 'TIME', length(timein));
    depthdim = netcdf.defDim(ncid, 'DEPTH', length(depthin));
    
    % Define dimension-ish variables
    latvar = netcdf.defVar(ncid, 'LATITUDE', 'NC_FLOAT', latdim);
    lonvar = netcdf.defVar(ncid, 'LONGITUDE', 'NC_FLOAT', londim);
    timevar = netcdf.defVar(ncid, 'TIME', 'NC_DOUBLE', timedim);
    depthvar = netcdf.defVar(ncid, 'DEPH', 'NC_FLOAT', [depthdim,timedim]);
    %possystvar = netcdf.defVar(ncid, 'POSITIONING_SYSTEM', 'NC_CHAR', posdim);
    
    %posvar = netcdf.defVar(ncid, 'POSITION', 'NC_FLOAT', [timedim]);
    % Dimension variables QC DM
    depthvarqc = netcdf.defVar(ncid, 'DEPH_QC', 'NC_BYTE', [depthdim,timedim]);
    %depthvardm = netcdf.defVar(ncid, 'DEPH_DM', 'NC_CHAR', [depthdim,timedim]);
    posvarqc = netcdf.defVar(ncid, 'POSITION_QC', 'NC_BYTE', posdim);
    timevarqc = netcdf.defVar(ncid, 'TIME_QC', 'NC_BYTE', timedim);
    
    % Define other variables
    for vv=1:length(vars)
        eval([vars{vv},'var=netcdf.defVar(ncid,''',osvars{vv},...
            ''',''NC_INT'',[depthdim,timedim]);']);
        eval([vars{vv},'varqc=netcdf.defVar(ncid,''',osvars{vv},...
            '_QC'',''NC_BYTE'',[depthdim,timedim]);']);
    %    eval([vars{vv},'vardm=netcdf.defVar(ncid,''',osvars{vv},...
    %        '_DM'',''NC_CHAR'',[depthdim,timedim]);']);
    end
    
    netcdf.defVarFill(ncid, timevar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, latvar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, lonvar, false, 9.9692099683868690e+36);
    netcdf.defVarFill(ncid, depthvar, false, 9.9692099683868690e+36);
   % netcdf.defVarFill(ncid, possystvar, false, '');
    netcdf.defVarFill(ncid, timevarqc, false, -127);
    netcdf.defVarFill(ncid, posvarqc, false, -127);
    netcdf.defVarFill(ncid, depthvarqc, false, -127);
   % netcdf.defVarFill(ncid, depthvardm, false, '');
    
    % Define _FillValue of variables (does not work after reDef);
    for vv=1:length(vars)
        eval(['netcdf.defVarFill(ncid,',vars{vv},'var,false,-2147483647);']);
        eval(['netcdf.defVarFill(ncid,',vars{vv},'varqc,false,-127);']);
      %  eval(['netcdf.defVarFill(ncid,',vars{vv},'vardm,false,'''');']);
    end
    
    % Exit define mode
    netcdf.endDef(ncid);
    
    % Put data
    % Put data in dimensions
    netcdf.putVar(ncid, latvar, latin);
    netcdf.putVar(ncid, lonvar, lonin);
    netcdf.putVar(ncid, timevar, timein);
    netcdf.putVar(ncid, timevarqc, timeinqc);
    netcdf.putVar(ncid, depthvar, depthinmatrix);
    netcdf.putVar(ncid, depthvarqc, depthinqcmatrix);
 %   netcdf.putVar(ncid, depthvardm, depthindmmatrix);
 %   netcdf.putVar(ncid, possystvar, possystin);
    netcdf.putVar(ncid, posvarqc, posinqc);
    
    % Put data in variables
    for vv=1:length(vars);
        eval(['netcdf.putVar(ncid,',vars{vv},'var,',vars{vv},'in);']);
        eval(['netcdf.putVar(ncid,',vars{vv},'varqc,',vars{vv},'inqc);']);
      %  eval(['netcdf.putVar(ncid,',vars{vv},'vardm,',vars{vv},'indm);']);
    end
    
    % Re-enter define mode (can be done before???)
    netcdf.reDef(ncid);
    
% Add attributes to dimensions
netcdf.putAtt(ncid, latvar, 'long_name', 'Latitude of each location');
netcdf.putAtt(ncid, latvar, 'standard_name', 'latitude');
netcdf.putAtt(ncid, latvar, 'units', 'degree_north');
netcdf.putAtt(ncid, latvar, 'valid_min', -90.0);
netcdf.putAtt(ncid, latvar, 'valid_max', 90.0);
netcdf.putAtt(ncid, latvar, 'QC_indicator', 1);
netcdf.putAtt(ncid, latvar, 'QC_procedure', 1);
% netcdf.putAtt(ncid, latvar, 'uncertainty', '');
% netcdf.putAtt(ncid, latvar, 'comment', '');
netcdf.putAtt(ncid, latvar, 'axis', 'Y');

% Longitude
netcdf.putAtt(ncid, lonvar, 'long_name', 'Longitude of each location');
netcdf.putAtt(ncid, lonvar, 'standard_name', 'longitude');
netcdf.putAtt(ncid, lonvar, 'units', 'degree_east');
netcdf.putAtt(ncid, lonvar, 'valid_min', -180.0);
netcdf.putAtt(ncid, lonvar, 'valid_max', 180.0);
netcdf.putAtt(ncid, lonvar, 'QC_indicator', 1);
netcdf.putAtt(ncid, lonvar, 'QC_procedure', 1);
% netcdf.putAtt(ncid, lonvar, 'uncertainty', '');
% netcdf.putAtt(ncid, lonvar, 'comment', '');
netcdf.putAtt(ncid, lonvar, 'axis', 'X');

% Time
netcdf.putAtt(ncid, timevar, 'long_name', 'Time');
netcdf.putAtt(ncid, timevar, 'standard_name', 'time');
netcdf.putAtt(ncid, timevar, 'units', 'days since 1950-01-01T00:00:00Z');
netcdf.putAtt(ncid, timevar, 'valid_min', -90000.);
netcdf.putAtt(ncid, timevar, 'valid_max', 90000.);
netcdf.putAtt(ncid, timevar, 'QC_indicator', 1);
netcdf.putAtt(ncid, timevar, 'QC_procedure', 1);
% netcdf.putAtt(ncid, timevar, 'uncertainty', '');
% netcdf.putAtt(ncid, timevar, 'comment', '');
netcdf.putAtt(ncid, timevar, 'axis', 'T');

% Depth
netcdf.putAtt(ncid, depthvar, 'long_name', 'Depth');
netcdf.putAtt(ncid, depthvar, 'standard_name', 'depth');
netcdf.putAtt(ncid, depthvar, 'valid_min', -12000.0);
netcdf.putAtt(ncid, depthvar, 'valid_max', 12000.0);
netcdf.putAtt(ncid, depthvar, 'units', 'm');
netcdf.putAtt(ncid, depthvar, 'positive', 'down');
netcdf.putAtt(ncid, depthvar, 'reference', 'sea_level');
netcdf.putAtt(ncid, depthvar, 'QC_indicator', 1);
netcdf.putAtt(ncid, depthvar, 'QC_procedure', 1);
%netcdf.putAtt(ncid, depthvar, 'uncertainty', '');
%netcdf.putAtt(ncid, depthvar, 'comment', '');
netcdf.putAtt(ncid, depthvar, 'axis', 'Z');

% Time QC
netcdf.putAtt(ncid, timevarqc, 'long_name', 'quality flag');
netcdf.putAtt(ncid, timevarqc, 'conventions', 'Copernicus Marine in situ reference table 2');
netcdf.putAtt(ncid, timevarqc, 'valid_min', int8(0));
netcdf.putAtt(ncid, timevarqc, 'valid_max', int8(9));
netcdf.putAtt(ncid, timevarqc, 'flag_values',  [int8(0)  int8(1)  int8(2)  int8(3)  int8(4)  int8(5)  int8(6)  int8(7)  int8(8)  int8(9)]);
netcdf.putAtt(ncid, timevarqc, 'flag_meanings','no_qc_performed good_data probably_good_data bad_data_that_are_potentially_correctable bad_data value_changed not_used nominal_value interpolated_value missing_value');
% Depth QC
netcdf.putAtt(ncid, depthvarqc, 'long_name', 'quality flag');
netcdf.putAtt(ncid, depthvarqc, 'conventions', 'Copernicus Marine in situ reference table 2');
netcdf.putAtt(ncid, depthvarqc, 'valid_min', int8(0));
netcdf.putAtt(ncid, depthvarqc, 'valid_max', int8(9));
netcdf.putAtt(ncid, depthvarqc, 'flag_values',  [int8(0)  int8(1)  int8(2)  int8(3)  int8(4)  int8(5)  int8(6)  int8(7)  int8(8)  int8(9)]);
netcdf.putAtt(ncid, depthvarqc, 'flag_meanings','no_qc_performed good_data probably_good_data bad_data_that_are_potentially_correctable bad_data value_changed not_used nominal_value interpolated_value missing_value');
% Position system QC
netcdf.putAtt(ncid, posvarqc, 'long_name', 'quality flag');
netcdf.putAtt(ncid, posvarqc, 'conventions', 'Copernicus Marine in situ reference table 2');
netcdf.putAtt(ncid, posvarqc, 'valid_min', int8(0));
netcdf.putAtt(ncid, posvarqc, 'valid_max', int8(9));
netcdf.putAtt(ncid, posvarqc, 'flag_values',  [int8(0)  int8(1)  int8(2)  int8(3)  int8(4)  int8(5)  int8(6)  int8(7)  int8(8)  int8(9)]);
netcdf.putAtt(ncid, posvarqc, 'flag_meanings','no_qc_performed good_data probably_good_data bad_data_that_are_potentially_correctable bad_data value_changed not_used nominal_value interpolated_value missing_value');

    
    % Add attributes to variables
    for vv=1:length(vars)
        % Variables
        eval(['netcdf.putAtt(ncid,',vars{vv},'var,''units'',''',osunits{vv},''');']);
        eval(['netcdf.putAtt(ncid,',vars{vv},'var,''standard_name'',''',osstandardname{vv},''');']);
        eval(['netcdf.putAtt(ncid,',vars{vv},'var,''long_name'',''',oslongname{vv},''');']);
        eval(['netcdf.putAtt(ncid,',vars{vv},'var,''scale_factor'',0.001);']);
        eval(['netcdf.putAtt(ncid,',vars{vv},'var,''add_offset'',0);']);
        %if vv==2;
        %eval(['netcdf.putAtt(ncid,',vars{vv},'var,''valid_min'',-100.0);']);
        %else
        %eval(['netcdf.putAtt(ncid,',vars{vv},'var,''valid_min'',0.0);']);
        %end
        %eval(['netcdf.putAtt(ncid,',vars{vv},'var,''valid_max'',100000.0);']);
        %eval(['netcdf.putAtt(ncid,',vars{vv},'var,''coordinates'',''depth time'');']);     
        
        % QC
        eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''long_name'',''quality flag'');']);
        eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''conventions'',''Copernicus Marine in situ reference table 2'');']);
%THIS SEEMS TO NEED TO BE DONE ONE BY ONE. BLEGH
         eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''valid_min'',int8(0));']);
         eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''valid_max'',int8(9));']);
         eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''flag_values'', [int8(0)  int8(1)  int8(2)  int8(3)  int8(4)  int8(5)  int8(6)  int8(7)  int8(8)  int8(9)]);']);

eval(['netcdf.putAtt(ncid,',vars{vv},'varqc,''flag_meanings'',''no_qc_performed good_data probably_good_data bad_data_that_are_potentially_correctable bad_data value_changed not_used nominal_value interpolated_value missing_value'');']);
        
        % DM
       % eval(['netcdf.putAtt(ncid,',vars{vv},'vardm,''long_name'',''method of data processing'');']);
       % eval(['netcdf.putAtt(ncid,',vars{vv},'vardm,''conventions'',''OceanSITES reference table 5'');']);
       % eval(['netcdf.putAtt(ncid,',vars{vv},'vardm,''flag_values'',''R, P, D, M'');']);
       % eval(['netcdf.putAtt(ncid,',vars{vv},'vardm,''flag_meanings'',''real-time provisional delayed-mode mixed'');']);
        
    end
    
    % add qc attributes that matlab refuses :S
   % run('CMEMSGLODAPv22019_extraqcattr.m')
    
    % Add global attributes
    globid = netcdf.getConstant('GLOBAL');
    
    
netcdf.putAtt(ncid, globid, 'data_type', data_type);
netcdf.putAtt(ncid, globid, 'platform_code', platform_code);
netcdf.putAtt(ncid, globid, 'data_mode', 'D');
    netcdf.putAtt(ncid, globid, 'title', 'Global Ocean - In Situ reprocessed carbon observations - GLODAPv2.2019');
%netcdf.putAtt(ncid, globid, 'summary', '');
netcdf.putAtt(ncid, globid, 'naming_authority', 'Copernicus Marine in situ');
netcdf.putAtt(ncid, globid, 'id', outputfile(1:end-3));
netcdf.putAtt(ncid, globid, 'wmo_platform_code', '');
netcdf.putAtt(ncid, globid, 'source', source);
netcdf.putAtt(ncid, globid, 'source_platform_category_code', source_platform_category_code);
netcdf.putAtt(ncid, globid, 'institution_edmo_code', institution_edmo_code);
netcdf.putAtt(ncid, globid, 'institution', institution);
netcdf.putAtt(ncid, globid, 'institution_references', '');

%netcdf.putAtt(ncid, globid, 'area', ''); % North/Tropical/South Atlantic, Pacific, Indian, Southern, Arctic Ocean
netcdf.putAtt(ncid, globid, 'geospatial_lat_min', num2str(min(latin)));
netcdf.putAtt(ncid, globid, 'geospatial_lat_max', num2str(max(latin)));
netcdf.putAtt(ncid, globid, 'geospatial_lon_min', num2str(min(lonin)));
netcdf.putAtt(ncid, globid, 'geospatial_lon_max', num2str(max(lonin)));
netcdf.putAtt(ncid, globid, 'geospatial_vertical_min', '5.0');
netcdf.putAtt(ncid, globid, 'geospatial_vertical_max', '5.0');
netcdf.putAtt(ncid, globid, 'time_coverage_start', datestr(min(timeinglodapMATLAB),'yyyy-mm-ddTHH:MM:SSZ'));
netcdf.putAtt(ncid, globid, 'time_coverage_end', datestr(max(timeinglodapMATLAB),'yyyy-mm-ddTHH:MM:SSZ'));
netcdf.putAtt(ncid, globid, 'cdm_data_type', cdm_data_type);
%netcdf.putAtt(ncid, globid, 'summary', '');

netcdf.putAtt(ncid, globid, 'format_version', '1.4');
netcdf.putAtt(ncid, globid, 'Conventions', 'CF-1.6 Copernicus-InSituTAC-Manual-1.0 Copernicus-InSituTAC-SRD-1.4 Copernicus-InSituTAC-ParametersList-3.1.0');
netcdf.putAtt(ncid, globid, 'netcdf_version', 'netCDF-4 classic model');

netcdf.putAtt(ncid, globid, 'references', 'http://marine.copernicus.eu https://www.glodap.info');
netcdf.putAtt(ncid, globid, 'data_assembly_center', 'BERGEN');
netcdf.putAtt(ncid, globid, 'update_interval', 'void');
    netcdf.putAtt(ncid, globid, 'citation', ['These data were collected and made freely available by the Copernicus project and the programs that contribute to it. ',...
        'Cite as Olsen et al. (2019)a, Olsen et al. (2019)a ']);
netcdf.putAtt(ncid, globid, 'doi', '10.5194/essd-11-1437-2019 10.25921/xnme-wr20');

netcdf.putAtt(ncid, globid, 'date_update', datestr(now, 'yyyy-mm-ddTHH:MM:SSZ'));
netcdf.putAtt(ncid, globid, 'history', [datestr(now, 'yyyy-mm-ddTHH:MM:SSZ'),' : Creation']);
netcdf.putAtt(ncid, globid, 'last_date_observation',datestr(timeinglodapMATLAB(end),'yyyy-mm-ddTHH:MM:SSZ'));
netcdf.putAtt(ncid, globid, 'last_latitude_observation',latin(end));
netcdf.putAtt(ncid, globid, 'last_longitude_observation',lonin(end));
netcdf.putAtt(ncid, globid, 'distribution_statement','These data follow Copernicus standards; they are public and free of charge. User assumes all risk for use of data. User must display citation in any publication or product using data. User must contact PI prior to any commercial use of data.');

%     if ec==720 | ec==721
%         netcdf.putAtt(ncid, globid, 'cruise_comment', 'Data gathered by RV Bjarni Saemundsson and RV Arni Fridrikkson (Callsigns TFNA/TFJA; IMO numbers 9192404/6710358)');
%     elseif ec==722
%         netcdf.putAtt(ncid, globid, 'cruise_comment', 'Data gathered by RV Belgica, RV Charles Darwin and RV Meteor');
%     end
    
    % Close nc file
    netcdf.close(ncid);
    
  
    clearvars '-except' workrootdir outdir GLODAPv22019 GLODAPv22019_info ...
    cmode allplatformcodes unique_platform_code ec ...
    invars vars osvars osunits oslongname osstandardname

 %   clearvars '-except' cmode ec workrootdir outdir GLODAPcruises GLODAPv22019 ...
 %       unique_cruise invars vars osvars osunits oslongname osstandardname
    
end

toc
%%
system(['cd /Users/rpr061/Dropbox/BCDC_Projects/CMEMS_INSTAC/REP_Products/current_FormatChecker/; for f in ', outdir,'VESSEL/*.nc; do ./control.csh $f >> ',outdir,'VESSEL/formatcheckoutSOCAT; done'])
system(['cd /Users/rpr061/Dropbox/BCDC_Projects/CMEMS_INSTAC/REP_Products/current_FormatChecker/; for f in ', outdir,'ETC/*.nc; do ./control.csh $f >> ',outdir,'ETC/formatcheckoutSOCAT; done'])






